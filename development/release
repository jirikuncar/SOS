#!/usr/bin/env sos-runner
#fileformat=SOS1.0

# This script releases SoS to different destinations, including
#
# 1. source distribution to pip
# 2. docker images to docker hub
# 3. website to github.io

[patch: shared='version']
parameter: version = str
sh:
	perl -pi.bak -e "s/^__version__ = .*/__version__ = '${version}'/" ../sos/_version.py


[pip]
# check the version of the latest version
cur_ver = get_output("pip show sos | grep Version | cut -d' ' -f2").strip()

# do not upload if the version on pip is the current one
stop_if(cur_ver == version)

sh:	workdir='..'
	python setup.py sdist upload
	pip install sos --upgrade

[update-docker]
# add documentation to Docker container
depends: executable('docker')

# copy doc over
run: workdir='..'
    rm -rf development/docker-notebook/doc
    # copy only ipynb and .sos files to docker
    rsync -av --prune-empty-dirs --include "*/" --exclude ".ipynb_checkpoints" \
        --include "*.ipynb" --include "*.jpg" --include "*.png" --exclude "*" \
        docs/src/documentation docs/src/tutorials docs/src/examples docs/doc/media \
		development/docker-notebook/doc

# update docker and push
run:
	docker build --no-cache -t mdabioinfo/sos docker-base
	docker push mdabioinfo/sos

	docker build --no-cache -t mdabioinfo/sos-notebook docker-notebook
	docker push mdabioinfo/sos-notebook
# update docker on ec2

[update-ec2]
parameter: pem=glob.glob('*.pem')
run:
   ssh -i ${pem} ubuntu@ec2-34-192-184-206.compute-1.amazonaws.com 'bash -s '< update_ec2_docker.sh

[getFileNames]
run:
	python ../docs/js/findnames.py

[convert-documentation]
input:  '../docs/src/documentation/*.ipynb', group_by=1
depends: '../docs/src/documentation/toc_doc.tpl'
output: _input[0].replace('/src/', '/doc/').replace('.ipynb', '.html')

run:
	cd ../docs/src/documentation
	sos convert ${_input!a} ${_output!a}  --template toc_doc

[convert-tutorials]
input:  '../docs/src/tutorials/*.ipynb', group_by=1
depends: '../docs/src/tutorials/toc_tut.tpl'
output: _input[0].replace('/src/', '/doc/').replace('.ipynb', '.html')

run: 
	cd ../docs/src/tutorials
	sos convert ${_input!a} ${_output!a}  --template toc_tut

[convert-homepage]
input:  '../docs/src/homepage/*.ipynb', group_by=1
output: "../docs/${_input!bn}.html"

run: 
	cd ../docs/src/tutorials
	sos convert ${_input!a} ${_output!a} --template basic

[convert-examples]
input:  '../docs/src/examples/*.sos', 'release', group_by=1
output: "../docs/doc/examples/${_input!bn}.html"

run: workdir='../docs/doc/examples'
	cp ${_input!a} .
	sos convert ${_input!b} ${_output!b} --raw ${_input!b}

[update-website]

# convert ipynb to HTML
sos_run('getFileNames')
sos_run('convert-documentation')
sos_run('convert-tutorials')
sos_run('convert-homepage')
sos_run('convert-examples')

# push changes to website
parameter: msg = "Update website"

run: workdir='..'
	git add --all docs/doc/documentation docs/doc/tutorials docs/doc/examples docs/doc/media docs/js/docs.js docs/*.html
	git commit docs/*.html docs/doc/* --no-verify -m '${msg}'
	git push --no-verify

[check-link]

# https://www.npmjs.com/package/broken-link-checker
# use command
#
#     npm install broken-link-checker -g
#
# to install
depends: executable('blc')

# check homepage
run:
    blc http://vatlab.github.io/SOS

input: '../docs/src/*/*.ipynb', group_by=1

if 'homepage' in _input[0]:
    run("blc http://vatlab.github.io/SOS/${_input!bn}.html")
else:
    run("blc http://vatlab.github.io/SOS/doc/${_input!db}/${_input!bn}.html")


[default]
sos_run('patch + pip + update-docker + update-ec2 + update-website')
